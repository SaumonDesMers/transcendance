// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Coa {
	ORDER
	ASSEMBLY
	FEDERATION
	ALLIANCE
}

model User {
	id Int	@id
	username String @unique
	chatUser ChatUser?

	darkMode Boolean

	twoFactorAuthenticationSecret String?
	isTwoFactorAuthenticationEnabled Boolean?
	bio String @db.VarChar(200)
	coa Coa

	winningGames Game[] @relation("winner")
	losingGames Game[] @relation("loser")
}

model ChatUser {
	userId Int @id
	user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

	messages Message[]
	joinedChannels Channel[]

	blocked ChatUser[] @relation("ChatUserblocking")
	blockedBy ChatUser[] @relation("ChatUserblocking")

	ownedChannels GroupChannel[] @relation("ChannelOwner")
	adminChannels GroupChannel[] @relation("ChannelAdmin")

	createdMutes Mute[] @relation("MuteAuthor")
	receivedMutes Mute[] @relation("MuteTarget")
}

model Message {
	id Int @id @default(autoincrement())
	content String
	author ChatUser? @relation(fields: [chatUserId], references: [userId])
	channel Channel @relation(fields: [channelId], references: [id])
	chatUserId Int
	channelId Int
	postedAt DateTime
}

// The objective for channels is to have some kind of hierarchy
// with base being Channel and two derived version being TextChannel and DMChannel
//so the black magic used here is in this noble objective please forgive me

model Channel {
	id Int @id @default(autoincrement())
	name String @unique

	users ChatUser[]
	messages Message[]

	dmChannel DMChannel?
	textChannel GroupChannel?
}

model Mute {
	id Int @id @default(autoincrement())

	author ChatUser @relation("MuteAuthor", fields: [authorId], references: [userId])
	target ChatUser @relation("MuteTarget", fields: [targetId], references: [userId])
	authorId Int
	targetId Int

	groupChannel GroupChannel @relation("ChannelMute", fields: [groupChannelId], references: [channelId])
	groupChannelId Int
	endDate DateTime
}

model DMChannel {
	channel Channel @relation(fields: [channelId], references: [id])
	channelId Int @unique @id
}

model GroupChannel {
	channel Channel @relation(fields: [channelId], references: [id])
	channelId Int @unique @id

	ownerId Int
	owner ChatUser @relation("ChannelOwner", fields: [ownerId], references: [userId])
	admins ChatUser[] @relation("ChannelAdmin")
	mutes Mute[] @relation("ChannelMute")
}

model Game {
	id Int @id @default(autoincrement())

	winnerScore Int
	LoserScore Int

	winner User @relation("winner", fields: [winnerId], references: [id])
	winnerId Int 

	loser User @relation("loser", fields: [loserId], references: [id])
	loserId Int
}
